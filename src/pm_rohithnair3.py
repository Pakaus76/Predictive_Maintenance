# -*- coding: utf-8 -*-
"""PM_RohithNair3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KUSpp4X_B_VstgZLK3NSyKj1LqEgdfYt
"""

###################
### LIBRARIES DECLARATION
###################

import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import LocalOutlierFactor
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

###################
### FUNCTIONS DEFINITIONS
###################

def data_preprocessing(file_path="CIA-1.csv"):
    """
    Full data preprocessing:
    - Rename columns
    - Drop unnecessary columns
    - Remove outliers
    - Compute median values BEFORE standardization
    - Standardization
    - SMOTE for balancing classes

    Returns:
    - df_resampled: Processed DataFrame
    - scaler: StandardScaler fitted to the data
    - medians: Dictionary with original median values before standardization
    """
    ###################
    ### UPLOAD DATA
    ###################

    df = pd.read_csv(file_path)

    ###################
    ### COLUMN RENAME
    ###################

    df.rename(columns={'Air temperature [K]': 'Air Temperature',
                       'Process temperature [K]': 'Process Temperature',
                       'Rotational speed [rpm]': 'Rotational Speed',
                       'Vibration Levels ': 'Vibration Levels',
                       'Torque [Nm]': 'Torque'},
              inplace=True)

    ###################
    ### COLUMN ELIMINATION (REMOVED "Type")
    ###################

    df.drop(['Product ID', 'UDI', 'Type'], axis=1, inplace=True)

    ###################
    ### ONE-HOT ENCODING TO FAILURE TYPE
    ###################

    df['Failure'] = df['Failure Type'].apply(lambda x: 0 if x == 'No Failure' else 1)
    df.drop(columns=['Failure Type'], inplace=True)
    df.rename(columns={'Failure': 'Failure Type'}, inplace=True)

    ###################
    ### ALL TO FLOAT CONVERSION
    ###################

    df = df.astype(float)

    ###################
    ### OUTLIERS ELIMINATION
    ###################

    excluded_columns = ['Failure Type']

    for col in df.columns:
        if col not in excluded_columns:
            Q1 = df[col].quantile(0.25)
            Q3 = df[col].quantile(0.75)
            IQR = Q3 - Q1
            outliers = df[(df[col] < (Q1 - 1.5 * IQR)) | (df[col] > (Q3 + 1.5 * IQR))]
            if not outliers.empty:
                df.drop(outliers.index, inplace=True)

    lof = LocalOutlierFactor(n_neighbors=5)
    outliers = lof.fit_predict(df)
    df = df[outliers != -1]

    ###################
    ### COMPUTE MEDIAN VALUES BEFORE STANDARDIZATION
    ###################

    medians = df[["Rotational Speed", "Torque", "Vibration Levels"]].median().to_dict()

    ###################
    ### STANDARDIZATION
    ###################

    columns_to_normalize = [col for col in df.columns if col != 'Failure Type']
    scaler = StandardScaler()
    df_standardized = df.copy()
    df_standardized[columns_to_normalize] = scaler.fit_transform(df[columns_to_normalize])

    # Save the preprocessed dataset
    df_standardized.to_csv("preprocessed_data.csv", index=False)

    ###################
    ### APPLY SMOTE
    ###################

    X = df_standardized.drop(columns=["Failure Type"])
    y = df_standardized["Failure Type"]

    smote = SMOTE(sampling_strategy='auto', random_state=42)
    X_resampled, y_resampled = smote.fit_resample(X, y)

    df_resampled = pd.DataFrame(X_resampled, columns=X.columns)
    df_resampled["Failure Type"] = y_resampled

    # Save the balanced dataset
    df_resampled.to_csv("balanced_data.csv", index=False)

    return df_resampled, scaler, medians


###################
### DATA PREPROCESSING FUNCTION CALL
###################

df_resampled, scaler, medians = data_preprocessing()

###################
### DATA SELECTION & PARTITION
###################

X = df_resampled.drop(columns=["Failure Type"])
y = df_resampled["Failure Type"]

###################
### CROSS VALIDATION
###################

kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
rf = RandomForestClassifier(n_estimators=200, max_depth=10, random_state=42, class_weight="balanced")

cv_accuracy = cross_val_score(rf, X, y, cv=kf, scoring='accuracy').mean()
cv_precision = cross_val_score(rf, X, y, cv=kf, scoring='precision').mean()
cv_recall = cross_val_score(rf, X, y, cv=kf, scoring='recall').mean()
cv_f1 = cross_val_score(rf, X, y, cv=kf, scoring='f1').mean()

print("\n**Cross Validation Performance:**")
print(f"CV Accuracy: {cv_accuracy:.3f}")
print(f"CV Precision: {cv_precision:.3f}")
print(f"CV Recall: {cv_recall:.3f}")
print(f"CV F1-score: {cv_f1:.3f}")

###################
### RANDOM FOREST FINAL TRAINING & SAVE MODEL
###################

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

rf.fit(X_train, y_train)
y_pred = rf.predict(X_test)

# Save trained model
joblib.dump(rf, "RF_predictive_maintenance.pkl")
joblib.dump({"scaler": scaler}, "scaler.pkl")
joblib.dump(medians, "medians.pkl")

# Generate confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["No Failure", "Failure"], yticklabels=["No Failure", "Failure"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.savefig("confusion_matrix.png")
plt.show()

# Print final metrics
print("\n**Final Model Performance:**")
print(f"Accuracy: {accuracy_score(y_test, y_pred):.3f}")
print(f"Precision: {precision_score(y_test, y_pred):.3f}")
print(f"Recall: {recall_score(y_test, y_pred):.3f}")
print(f"F1-score: {f1_score(y_test, y_pred):.3f}")

print("\nModel saved as 'RF_predictive_maintenance.pkl'")
print("Scaler saved as 'scaler.pkl'")
print("Median values saved as 'medians.pkl'")
print("Confusion matrix saved as 'confusion_matrix.png'")